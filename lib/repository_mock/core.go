// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/motemen/prchecklist/v2/lib/usecase (interfaces: CoreRepository)

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	prchecklist "github.com/motemen/prchecklist/v2"
	reflect "reflect"
)

// MockCoreRepository is a mock of CoreRepository interface
type MockCoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCoreRepositoryMockRecorder
}

// MockCoreRepositoryMockRecorder is the mock recorder for MockCoreRepository
type MockCoreRepositoryMockRecorder struct {
	mock *MockCoreRepository
}

// NewMockCoreRepository creates a new mock instance
func NewMockCoreRepository(ctrl *gomock.Controller) *MockCoreRepository {
	mock := &MockCoreRepository{ctrl: ctrl}
	mock.recorder = &MockCoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCoreRepository) EXPECT() *MockCoreRepositoryMockRecorder {
	return m.recorder
}

// AddCheck mocks base method
func (m *MockCoreRepository) AddCheck(arg0 context.Context, arg1 prchecklist.ChecklistRef, arg2 string, arg3 prchecklist.GitHubUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCheck", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCheck indicates an expected call of AddCheck
func (mr *MockCoreRepositoryMockRecorder) AddCheck(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCheck", reflect.TypeOf((*MockCoreRepository)(nil).AddCheck), arg0, arg1, arg2, arg3)
}

// AddUser mocks base method
func (m *MockCoreRepository) AddUser(arg0 context.Context, arg1 prchecklist.GitHubUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockCoreRepositoryMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockCoreRepository)(nil).AddUser), arg0, arg1)
}

// GetChecks mocks base method
func (m *MockCoreRepository) GetChecks(arg0 context.Context, arg1 prchecklist.ChecklistRef) (prchecklist.Checks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecks", arg0, arg1)
	ret0, _ := ret[0].(prchecklist.Checks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecks indicates an expected call of GetChecks
func (mr *MockCoreRepositoryMockRecorder) GetChecks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecks", reflect.TypeOf((*MockCoreRepository)(nil).GetChecks), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockCoreRepository) GetUsers(arg0 context.Context, arg1 []int) (map[int]prchecklist.GitHubUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(map[int]prchecklist.GitHubUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockCoreRepositoryMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockCoreRepository)(nil).GetUsers), arg0, arg1)
}

// RemoveCheck mocks base method
func (m *MockCoreRepository) RemoveCheck(arg0 context.Context, arg1 prchecklist.ChecklistRef, arg2 string, arg3 prchecklist.GitHubUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCheck", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCheck indicates an expected call of RemoveCheck
func (mr *MockCoreRepositoryMockRecorder) RemoveCheck(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCheck", reflect.TypeOf((*MockCoreRepository)(nil).RemoveCheck), arg0, arg1, arg2, arg3)
}
